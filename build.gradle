plugins {
    id 'java'
    id 'org.springframework.boot' version "$orgSpringframeworkBoot"
    id 'io.spring.dependency-management' version "$ioSpringDependencyManagement"
    id 'org.openapi.generator' version "$orgOpenapiGenerator"
}

group = 'ru.ersted'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of("$javaVersion")
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework:spring-jdbc'
    implementation "org.postgresql:r2dbc-postgresql:$orgPostgresqlR2dbcPostgresql"
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    implementation 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:r2dbc'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation("org.testcontainers:postgresql")

    implementation "org.mapstruct:mapstruct:$orgMapstructMapstruct"
    annotationProcessor "org.mapstruct:mapstruct-processor:$orgMapstructMapstructProcessor"
}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    mainClass = 'ru.ersted.module_1spirngmvc.Module1SpirngMvcApplication'
    archiveBaseName.set('myapp-reactive')
    archiveVersion.set('')
    archiveClassifier.set('')
}

openApiGenerate {
    generatorName = 'java'
    inputSpec = file('src/main/resources/api/openapi.yaml')
            .toURI()
            .toString()
    outputDir = layout.buildDirectory
            .dir('generated')
            .get().asFile.absolutePath

    modelPackage = 'ru.ersted.module_1reactive.dto.generated'
    apiPackage = 'com.example.stub.api'

    globalProperties = [models: '']

    configOptions = [
            useJakartaEe              : 'true',
            constructorWithAllArgs    : 'true',
            dateLibrary               : 'java8',
            library                   : 'resttemplate',
            generateModelTests        : 'false',
            generateModelDocumentation: 'false',
            generateApiTests          : 'false',
            generateApiDocumentation  : 'false'
    ]
}

compileJava {
    dependsOn tasks.openApiGenerate
    source layout.buildDirectory.dir('generated/src/main/java')
}
